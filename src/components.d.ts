/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IRegister, IUser } from "./interfaces/user";
import { IAvatar } from "./interfaces/avatar";
import { IFilter } from "./interfaces/filter";
import { IFileStack } from "./interfaces/filestack";
export namespace Components {
    interface AuthLogin {
        "i18n": { login: string; identifier: { label: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "resetErrors": number;
    }
    interface AuthResetPassword {
        "confirmationCode": string;
        "i18n": { retype: { label: string; placeholder: string; errors: { required: string; minlen: string; equal: string; }; }; password: { change: string; label: string; placeholder: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "resetErrors": number;
        "userId": string;
    }
    interface AuthSignUp {
        "avatarUpload": false;
        "data": IRegister;
        "i18n": { signUp: string; confirm: string; name: { label: string; errors: { badword: string; required: string; minlen: string; exists: string; username: string; notvalid: string; alphaspace: string; }; }; identifier: { label: string; confirm: { message: string; button: string; }; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "resetErrors": number;
    }
    interface FileStackAvatar {
        "avatar": IAvatar;
        "background": any;
        "color": any;
        "ext": string;
        "height": number;
        "imgTitle": string;
        "link": string;
        "name": string;
        "placeholder": string;
        "width": number;
    }
    interface FileStackFilter {
        "filter": IFilter[];
    }
    interface FileStackImage {
        "autoAspectRatio": boolean;
        "ext": string;
        "fileStack": IFileStack;
        "fileStackSize": { size: string, pixelRatio: string }[];
        "placeholder": string;
        "rootElement": HTMLElement;
        "trackViewTimeout": any;
    }
    interface FileStackTransfer {
        "account": IUser;
        "openUploadMenu": () => Promise<any>;
    }
    interface FileStackVideo {
        "autoAspectRatio": boolean;
        "autoPlayVideo": boolean;
        "fileStack": IFileStack;
        "fullScreenButton": boolean;
        "loopVideo": boolean;
        "muteButton": boolean;
        "mutedVideo": boolean;
        "onlyPreview": boolean;
        "preload": string;
        "rootElement": HTMLElement;
        "showControls": boolean;
        "srcVideo": string;
        "switchMuteState": () => Promise<void>;
        "trackViewTimeout": any;
        "volume": number;
    }
    interface FileUpload {
        "accept": string;
        "capture": any;
        "multiple": boolean;
    }
    interface FileUploadDraggable {
        "accept": string;
        "iconName": string;
    }
}
declare global {
    interface HTMLAuthLoginElement extends Components.AuthLogin, HTMLStencilElement {
    }
    var HTMLAuthLoginElement: {
        prototype: HTMLAuthLoginElement;
        new (): HTMLAuthLoginElement;
    };
    interface HTMLAuthResetPasswordElement extends Components.AuthResetPassword, HTMLStencilElement {
    }
    var HTMLAuthResetPasswordElement: {
        prototype: HTMLAuthResetPasswordElement;
        new (): HTMLAuthResetPasswordElement;
    };
    interface HTMLAuthSignUpElement extends Components.AuthSignUp, HTMLStencilElement {
    }
    var HTMLAuthSignUpElement: {
        prototype: HTMLAuthSignUpElement;
        new (): HTMLAuthSignUpElement;
    };
    interface HTMLFileStackAvatarElement extends Components.FileStackAvatar, HTMLStencilElement {
    }
    var HTMLFileStackAvatarElement: {
        prototype: HTMLFileStackAvatarElement;
        new (): HTMLFileStackAvatarElement;
    };
    interface HTMLFileStackFilterElement extends Components.FileStackFilter, HTMLStencilElement {
    }
    var HTMLFileStackFilterElement: {
        prototype: HTMLFileStackFilterElement;
        new (): HTMLFileStackFilterElement;
    };
    interface HTMLFileStackImageElement extends Components.FileStackImage, HTMLStencilElement {
    }
    var HTMLFileStackImageElement: {
        prototype: HTMLFileStackImageElement;
        new (): HTMLFileStackImageElement;
    };
    interface HTMLFileStackTransferElement extends Components.FileStackTransfer, HTMLStencilElement {
    }
    var HTMLFileStackTransferElement: {
        prototype: HTMLFileStackTransferElement;
        new (): HTMLFileStackTransferElement;
    };
    interface HTMLFileStackVideoElement extends Components.FileStackVideo, HTMLStencilElement {
    }
    var HTMLFileStackVideoElement: {
        prototype: HTMLFileStackVideoElement;
        new (): HTMLFileStackVideoElement;
    };
    interface HTMLFileUploadElement extends Components.FileUpload, HTMLStencilElement {
    }
    var HTMLFileUploadElement: {
        prototype: HTMLFileUploadElement;
        new (): HTMLFileUploadElement;
    };
    interface HTMLFileUploadDraggableElement extends Components.FileUploadDraggable, HTMLStencilElement {
    }
    var HTMLFileUploadDraggableElement: {
        prototype: HTMLFileUploadDraggableElement;
        new (): HTMLFileUploadDraggableElement;
    };
    interface HTMLElementTagNameMap {
        "auth-login": HTMLAuthLoginElement;
        "auth-reset-password": HTMLAuthResetPasswordElement;
        "auth-sign-up": HTMLAuthSignUpElement;
        "file-stack-avatar": HTMLFileStackAvatarElement;
        "file-stack-filter": HTMLFileStackFilterElement;
        "file-stack-image": HTMLFileStackImageElement;
        "file-stack-transfer": HTMLFileStackTransferElement;
        "file-stack-video": HTMLFileStackVideoElement;
        "file-upload": HTMLFileUploadElement;
        "file-upload-draggable": HTMLFileUploadDraggableElement;
    }
}
declare namespace LocalJSX {
    interface AuthLogin {
        "i18n"?: { login: string; identifier: { label: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "onLoginProgress"?: (event: CustomEvent<any>) => void;
        "onLoginReset"?: (event: CustomEvent<any>) => void;
        "onLoginSuccess"?: (event: CustomEvent<any>) => void;
        "onSignUp"?: (event: CustomEvent<any>) => void;
        "resetErrors"?: number;
    }
    interface AuthResetPassword {
        "confirmationCode"?: string;
        "i18n"?: { retype: { label: string; placeholder: string; errors: { required: string; minlen: string; equal: string; }; }; password: { change: string; label: string; placeholder: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "onResetSubmit"?: (event: CustomEvent<any>) => void;
        "onResetSuccess"?: (event: CustomEvent<any>) => void;
        "resetErrors"?: number;
        "userId"?: string;
    }
    interface AuthSignUp {
        "avatarUpload"?: false;
        "data"?: IRegister;
        "i18n"?: { signUp: string; confirm: string; name: { label: string; errors: { badword: string; required: string; minlen: string; exists: string; username: string; notvalid: string; alphaspace: string; }; }; identifier: { label: string; confirm: { message: string; button: string; }; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "onSignUpNotApproved"?: (event: CustomEvent<any>) => void;
        "onSignUpProgress"?: (event: CustomEvent<any>) => void;
        "onSignUpSuccess"?: (event: CustomEvent<any>) => void;
        "resetErrors"?: number;
    }
    interface FileStackAvatar {
        "avatar"?: IAvatar;
        "background"?: any;
        "color"?: any;
        "ext"?: string;
        "height"?: number;
        "imgTitle"?: string;
        "link"?: string;
        "name"?: string;
        "placeholder"?: string;
        "width"?: number;
    }
    interface FileStackFilter {
        "filter"?: IFilter[];
        "onChangeFilter"?: (event: CustomEvent<any>) => void;
    }
    interface FileStackImage {
        "autoAspectRatio"?: boolean;
        "ext"?: string;
        "fileStack"?: IFileStack;
        "fileStackSize"?: { size: string, pixelRatio: string }[];
        "onTrackViewImage"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "rootElement"?: HTMLElement;
        "trackViewTimeout"?: any;
    }
    interface FileStackTransfer {
        "account"?: IUser;
        "onUploadFinished"?: (event: CustomEvent<any>) => void;
    }
    interface FileStackVideo {
        "autoAspectRatio"?: boolean;
        "autoPlayVideo"?: boolean;
        "fileStack"?: IFileStack;
        "fullScreenButton"?: boolean;
        "loopVideo"?: boolean;
        "muteButton"?: boolean;
        "mutedVideo"?: boolean;
        "onTrackViewVideo"?: (event: CustomEvent<any>) => void;
        "onlyPreview"?: boolean;
        "preload"?: string;
        "rootElement"?: HTMLElement;
        "showControls"?: boolean;
        "srcVideo"?: string;
        "trackViewTimeout"?: any;
        "volume"?: number;
    }
    interface FileUpload {
        "accept"?: string;
        "capture"?: any;
        "multiple"?: boolean;
        "onSelected"?: (event: CustomEvent<any>) => void;
    }
    interface FileUploadDraggable {
        "accept"?: string;
        "iconName"?: string;
        "onErrorAccepted"?: (event: CustomEvent<any>) => void;
        "onSelected"?: (event: CustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "auth-login": AuthLogin;
        "auth-reset-password": AuthResetPassword;
        "auth-sign-up": AuthSignUp;
        "file-stack-avatar": FileStackAvatar;
        "file-stack-filter": FileStackFilter;
        "file-stack-image": FileStackImage;
        "file-stack-transfer": FileStackTransfer;
        "file-stack-video": FileStackVideo;
        "file-upload": FileUpload;
        "file-upload-draggable": FileUploadDraggable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "auth-login": LocalJSX.AuthLogin & JSXBase.HTMLAttributes<HTMLAuthLoginElement>;
            "auth-reset-password": LocalJSX.AuthResetPassword & JSXBase.HTMLAttributes<HTMLAuthResetPasswordElement>;
            "auth-sign-up": LocalJSX.AuthSignUp & JSXBase.HTMLAttributes<HTMLAuthSignUpElement>;
            "file-stack-avatar": LocalJSX.FileStackAvatar & JSXBase.HTMLAttributes<HTMLFileStackAvatarElement>;
            "file-stack-filter": LocalJSX.FileStackFilter & JSXBase.HTMLAttributes<HTMLFileStackFilterElement>;
            "file-stack-image": LocalJSX.FileStackImage & JSXBase.HTMLAttributes<HTMLFileStackImageElement>;
            "file-stack-transfer": LocalJSX.FileStackTransfer & JSXBase.HTMLAttributes<HTMLFileStackTransferElement>;
            "file-stack-video": LocalJSX.FileStackVideo & JSXBase.HTMLAttributes<HTMLFileStackVideoElement>;
            "file-upload": LocalJSX.FileUpload & JSXBase.HTMLAttributes<HTMLFileUploadElement>;
            "file-upload-draggable": LocalJSX.FileUploadDraggable & JSXBase.HTMLAttributes<HTMLFileUploadDraggableElement>;
        }
    }
}
