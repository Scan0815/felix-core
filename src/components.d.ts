/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IonicColor } from "./interfaces/IonicColor";
import { IRegister, IUser } from "./interfaces/user";
import { IAvatar } from "./interfaces/avatar";
import { IFilter } from "./interfaces/filter";
import { IFileStack } from "./interfaces/filestack";
export namespace Components {
    interface FlxAuthInfoItem {
        "color": IonicColor;
        "icon": string;
        "infos": any;
    }
    interface FlxAuthLogin {
        "i18n": { login: string; identifier: { label: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "mode": "md" | "ios";
        "resetErrors": () => Promise<void>;
    }
    interface FlxAuthResetPassword {
        "confirmationCode": string;
        "i18n": { retype: { label: string; placeholder: string; errors: { required: string; minlen: string; equal: string; }; }; password: { change: string; label: string; placeholder: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "resetErrors": () => Promise<void>;
        "userId": string;
    }
    interface FlxAuthSignUp {
        "avatarUpload": false;
        "data": IRegister;
        "i18n": { signUp: string; confirm: string; name: { label: string; errors: { badword: string; required: string; minlen: string; exists: string; username: string; notvalid: string; alphaspace: string; }; }; identifier: { label: string; confirm: { message: string; button: string; }; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "resetErrors": () => Promise<void>;
    }
    interface FlxFileStackAvatar {
        "avatar": IAvatar;
        "background": any;
        "color": any;
        "ext": string;
        "height": number;
        "imgTitle": string;
        "link": string;
        "name": string;
        "placeholder": string;
        "width": number;
    }
    interface FlxFileStackFilter {
        "filter": IFilter[];
    }
    interface FlxFileStackImage {
        "autoAspectRatio": boolean;
        "ext": string;
        "fileStack": IFileStack;
        "fileStackSize": { size: string, pixelRatio: string }[];
        "placeholder": string;
        "rootElement": HTMLElement;
        "trackViewTimeout": any;
    }
    interface FlxFileStackTransfer {
        "account": IUser;
        "openUploadMenu": () => Promise<any>;
    }
    interface FlxFileStackVideo {
        "autoAspectRatio": boolean;
        "autoPlayVideo": boolean;
        "fileStack": IFileStack;
        "fullScreenButton": boolean;
        "loopVideo": boolean;
        "muteButton": boolean;
        "mutedVideo": boolean;
        "onlyPreview": boolean;
        "preload": string;
        "rootElement": HTMLElement;
        "showControls": boolean;
        "srcVideo": string;
        "switchMuteState": () => Promise<void>;
        "trackViewTimeout": any;
        "volume": number;
    }
    interface FlxFileUpload {
        "accept": string;
        "capture": any;
        "multiple": boolean;
    }
    interface FlxFileUploadDraggable {
        "accept": string;
        "iconName": string;
    }
}
declare global {
    interface HTMLFlxAuthInfoItemElement extends Components.FlxAuthInfoItem, HTMLStencilElement {
    }
    var HTMLFlxAuthInfoItemElement: {
        prototype: HTMLFlxAuthInfoItemElement;
        new (): HTMLFlxAuthInfoItemElement;
    };
    interface HTMLFlxAuthLoginElement extends Components.FlxAuthLogin, HTMLStencilElement {
    }
    var HTMLFlxAuthLoginElement: {
        prototype: HTMLFlxAuthLoginElement;
        new (): HTMLFlxAuthLoginElement;
    };
    interface HTMLFlxAuthResetPasswordElement extends Components.FlxAuthResetPassword, HTMLStencilElement {
    }
    var HTMLFlxAuthResetPasswordElement: {
        prototype: HTMLFlxAuthResetPasswordElement;
        new (): HTMLFlxAuthResetPasswordElement;
    };
    interface HTMLFlxAuthSignUpElement extends Components.FlxAuthSignUp, HTMLStencilElement {
    }
    var HTMLFlxAuthSignUpElement: {
        prototype: HTMLFlxAuthSignUpElement;
        new (): HTMLFlxAuthSignUpElement;
    };
    interface HTMLFlxFileStackAvatarElement extends Components.FlxFileStackAvatar, HTMLStencilElement {
    }
    var HTMLFlxFileStackAvatarElement: {
        prototype: HTMLFlxFileStackAvatarElement;
        new (): HTMLFlxFileStackAvatarElement;
    };
    interface HTMLFlxFileStackFilterElement extends Components.FlxFileStackFilter, HTMLStencilElement {
    }
    var HTMLFlxFileStackFilterElement: {
        prototype: HTMLFlxFileStackFilterElement;
        new (): HTMLFlxFileStackFilterElement;
    };
    interface HTMLFlxFileStackImageElement extends Components.FlxFileStackImage, HTMLStencilElement {
    }
    var HTMLFlxFileStackImageElement: {
        prototype: HTMLFlxFileStackImageElement;
        new (): HTMLFlxFileStackImageElement;
    };
    interface HTMLFlxFileStackTransferElement extends Components.FlxFileStackTransfer, HTMLStencilElement {
    }
    var HTMLFlxFileStackTransferElement: {
        prototype: HTMLFlxFileStackTransferElement;
        new (): HTMLFlxFileStackTransferElement;
    };
    interface HTMLFlxFileStackVideoElement extends Components.FlxFileStackVideo, HTMLStencilElement {
    }
    var HTMLFlxFileStackVideoElement: {
        prototype: HTMLFlxFileStackVideoElement;
        new (): HTMLFlxFileStackVideoElement;
    };
    interface HTMLFlxFileUploadElement extends Components.FlxFileUpload, HTMLStencilElement {
    }
    var HTMLFlxFileUploadElement: {
        prototype: HTMLFlxFileUploadElement;
        new (): HTMLFlxFileUploadElement;
    };
    interface HTMLFlxFileUploadDraggableElement extends Components.FlxFileUploadDraggable, HTMLStencilElement {
    }
    var HTMLFlxFileUploadDraggableElement: {
        prototype: HTMLFlxFileUploadDraggableElement;
        new (): HTMLFlxFileUploadDraggableElement;
    };
    interface HTMLElementTagNameMap {
        "flx-auth-info-item": HTMLFlxAuthInfoItemElement;
        "flx-auth-login": HTMLFlxAuthLoginElement;
        "flx-auth-reset-password": HTMLFlxAuthResetPasswordElement;
        "flx-auth-sign-up": HTMLFlxAuthSignUpElement;
        "flx-file-stack-avatar": HTMLFlxFileStackAvatarElement;
        "flx-file-stack-filter": HTMLFlxFileStackFilterElement;
        "flx-file-stack-image": HTMLFlxFileStackImageElement;
        "flx-file-stack-transfer": HTMLFlxFileStackTransferElement;
        "flx-file-stack-video": HTMLFlxFileStackVideoElement;
        "flx-file-upload": HTMLFlxFileUploadElement;
        "flx-file-upload-draggable": HTMLFlxFileUploadDraggableElement;
    }
}
declare namespace LocalJSX {
    interface FlxAuthInfoItem {
        "color"?: IonicColor;
        "icon"?: string;
        "infos"?: any;
    }
    interface FlxAuthLogin {
        "i18n"?: { login: string; identifier: { label: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "mode"?: "md" | "ios";
        "onLoginProgress"?: (event: CustomEvent<any>) => void;
        "onLoginReset"?: (event: CustomEvent<any>) => void;
        "onLoginSuccess"?: (event: CustomEvent<any>) => void;
        "onSignUp"?: (event: CustomEvent<any>) => void;
    }
    interface FlxAuthResetPassword {
        "confirmationCode"?: string;
        "i18n"?: { retype: { label: string; placeholder: string; errors: { required: string; minlen: string; equal: string; }; }; password: { change: string; label: string; placeholder: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "onResetSubmit"?: (event: CustomEvent<any>) => void;
        "onResetSuccess"?: (event: CustomEvent<any>) => void;
        "userId"?: string;
    }
    interface FlxAuthSignUp {
        "avatarUpload"?: false;
        "data"?: IRegister;
        "i18n"?: { signUp: string; confirm: string; name: { label: string; errors: { badword: string; required: string; minlen: string; exists: string; username: string; notvalid: string; alphaspace: string; }; }; identifier: { label: string; confirm: { message: string; button: string; }; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; password: { label: string; forgot: string; errors: { required: string; minlen: string; email: string; exists: string; identical: string; noaccountfound: string; notvalid: string; }; }; };
        "onSignUpNotApproved"?: (event: CustomEvent<any>) => void;
        "onSignUpProgress"?: (event: CustomEvent<any>) => void;
        "onSignUpSuccess"?: (event: CustomEvent<any>) => void;
    }
    interface FlxFileStackAvatar {
        "avatar"?: IAvatar;
        "background"?: any;
        "color"?: any;
        "ext"?: string;
        "height"?: number;
        "imgTitle"?: string;
        "link"?: string;
        "name"?: string;
        "placeholder"?: string;
        "width"?: number;
    }
    interface FlxFileStackFilter {
        "filter"?: IFilter[];
        "onChangeFilter"?: (event: CustomEvent<any>) => void;
    }
    interface FlxFileStackImage {
        "autoAspectRatio"?: boolean;
        "ext"?: string;
        "fileStack"?: IFileStack;
        "fileStackSize"?: { size: string, pixelRatio: string }[];
        "onTrackViewImage"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "rootElement"?: HTMLElement;
        "trackViewTimeout"?: any;
    }
    interface FlxFileStackTransfer {
        "account"?: IUser;
        "onUploadFinished"?: (event: CustomEvent<any>) => void;
    }
    interface FlxFileStackVideo {
        "autoAspectRatio"?: boolean;
        "autoPlayVideo"?: boolean;
        "fileStack"?: IFileStack;
        "fullScreenButton"?: boolean;
        "loopVideo"?: boolean;
        "muteButton"?: boolean;
        "mutedVideo"?: boolean;
        "onTrackViewVideo"?: (event: CustomEvent<any>) => void;
        "onlyPreview"?: boolean;
        "preload"?: string;
        "rootElement"?: HTMLElement;
        "showControls"?: boolean;
        "srcVideo"?: string;
        "trackViewTimeout"?: any;
        "volume"?: number;
    }
    interface FlxFileUpload {
        "accept"?: string;
        "capture"?: any;
        "multiple"?: boolean;
        "onSelected"?: (event: CustomEvent<any>) => void;
    }
    interface FlxFileUploadDraggable {
        "accept"?: string;
        "iconName"?: string;
        "onErrorAccepted"?: (event: CustomEvent<any>) => void;
        "onSelected"?: (event: CustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "flx-auth-info-item": FlxAuthInfoItem;
        "flx-auth-login": FlxAuthLogin;
        "flx-auth-reset-password": FlxAuthResetPassword;
        "flx-auth-sign-up": FlxAuthSignUp;
        "flx-file-stack-avatar": FlxFileStackAvatar;
        "flx-file-stack-filter": FlxFileStackFilter;
        "flx-file-stack-image": FlxFileStackImage;
        "flx-file-stack-transfer": FlxFileStackTransfer;
        "flx-file-stack-video": FlxFileStackVideo;
        "flx-file-upload": FlxFileUpload;
        "flx-file-upload-draggable": FlxFileUploadDraggable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "flx-auth-info-item": LocalJSX.FlxAuthInfoItem & JSXBase.HTMLAttributes<HTMLFlxAuthInfoItemElement>;
            "flx-auth-login": LocalJSX.FlxAuthLogin & JSXBase.HTMLAttributes<HTMLFlxAuthLoginElement>;
            "flx-auth-reset-password": LocalJSX.FlxAuthResetPassword & JSXBase.HTMLAttributes<HTMLFlxAuthResetPasswordElement>;
            "flx-auth-sign-up": LocalJSX.FlxAuthSignUp & JSXBase.HTMLAttributes<HTMLFlxAuthSignUpElement>;
            "flx-file-stack-avatar": LocalJSX.FlxFileStackAvatar & JSXBase.HTMLAttributes<HTMLFlxFileStackAvatarElement>;
            "flx-file-stack-filter": LocalJSX.FlxFileStackFilter & JSXBase.HTMLAttributes<HTMLFlxFileStackFilterElement>;
            "flx-file-stack-image": LocalJSX.FlxFileStackImage & JSXBase.HTMLAttributes<HTMLFlxFileStackImageElement>;
            "flx-file-stack-transfer": LocalJSX.FlxFileStackTransfer & JSXBase.HTMLAttributes<HTMLFlxFileStackTransferElement>;
            "flx-file-stack-video": LocalJSX.FlxFileStackVideo & JSXBase.HTMLAttributes<HTMLFlxFileStackVideoElement>;
            "flx-file-upload": LocalJSX.FlxFileUpload & JSXBase.HTMLAttributes<HTMLFlxFileUploadElement>;
            "flx-file-upload-draggable": LocalJSX.FlxFileUploadDraggable & JSXBase.HTMLAttributes<HTMLFlxFileUploadDraggableElement>;
        }
    }
}
